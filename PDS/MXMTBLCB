MX-Tables
COBOL
 Programming Reference Manual


Contents
Function Reference	2
Create a Table	3
Connect to a Table	4
Allocate a cell in a Table	5
Read data from a Table	6
Write data to a Table	6
Disconnect from a Table	7
Load a Table	7
Save a Table	8
Delete a Table	8



Function Reference
MX-Tables is a Matrix function for creating and sharing tables in th
e SYSPLEX. MX-Tables requires the Matrix applications programming en
vironment and applications programs must be connected to Matrix to f
unction. Before any of these functions are used the Matrix interface
 message block (MXPLIST) must be initialized by the MATRIX-ACCESS fu
nction. See Matrix COBOL Programming Manual for further information.
An example of the access function could be written like this.

		MATRIX-ACCESS 	TO MATRIX-REQUEST.
		MOVE 'MTRX' 	TO MATRIX-ACCESS-NAME.
		MOVE LOW-VALUES 	TO MATRIX-ACCESS-TOKEN.
		MOVE MATRIX-SYNC 	TO MATRIX-REQUEST-FLAG.
		CALL 'MXSTUB'  USING MATRIX-REQUEST-MSG.
		IF RETURN-CODE = 0
			THEN MOVE MATRIX-RETURN-ACCESS-TOKEN
			TO MATRIX-ACCESS-TOKEN
			ELSE


Create a Table
There are two types of table, fixed length and variable length cell
tables. In fixed length cell tables the sizes of the cells are all t
he same and are fixed when the table is created. In variable length
cell tables the cell sizes may all be different and are set when the
y are allocated. A fixed length table requires one Virtual Work Area
 for the data. A variable length table requires two VWA's, one for t
he index and one for the data. The VWA's required to construct a tab
le must be created using MATRIX-CREATE-WA before the table is create
d.  See Matrix COBOL Programming Manual for further information.
Tables may contain up to 12 dimensions. The range of coordinates in
each dimension must be set before the table is created.

      Table with variable length cells

           MOVE MATRIX-CREATE-TABLE TO MATRIX-REQUEST.
           MOVE tblname			TO MATRIX-TABLE-NAME.
           MOVE nDims 			TO MATRIX-TABLE-NUM-DIMS.
           MOVE nDMax1 			TO MATRIX-TABLE-DIMENSIONS(1).
           MOVE nDMax2 			TO MATRIX-TABLE-DIMENSIONS(2).
           .....
           MOVE nDMaxn 			TO MATRIX-TABLE-DIMENSIONS(n).
           MOVE indexvwa		TO MATRIX-TABLE-INDEX-NAME.
           MOVE datavwa			TO MATRIX-TABLE-DATA-NAME.
           MOVE ZERO   			TO MATRIX-TABLE-CELL-SIZE.
           MOVE MATRIX-SYNC 		TO MATRIX-REQUEST-FLAG.
           CALL 'MXSTUB'  USING MATRIX-REQUEST-MSG.
           IF RETURN-CODE = 0
           THEN
           ELSE PERFORM 9000-MESSAGE.

      Table with fixed length cells

           MOVE MATRIX-CREATE-TABLE TO MATRIX-REQUEST.
           MOVE tblname			TO MATRIX-TABLE-NAME.
           MOVE nDims 			TO MATRIX-TABLE-NUM-DIMS.
           MOVE nDMax1 			TO MATRIX-TABLE-DIMENSIONS(1).
           MOVE nDMax2 			TO MATRIX-TABLE-DIMENSIONS(2).
           .....
           MOVE nDMaxn 			TO MATRIX-TABLE-DIMENSIONS(n).
           MOVE SPACES 			TO MATRIX-TABLE-INDEX-NAME.
           MOVE datavwa 		TO MATRIX-TABLE-DATA-NAME.
           MOVE nSiz   			TO MATRIX-TABLE-CELL-SIZE.
           MOVE MATRIX-SYNC 		TO MATRIX-REQUEST-FLAG.
           CALL 'MXSTUB'  USING MATRIX-REQUEST-MSG.
           IF RETURN-CODE = 0
           THEN
           ELSE PERFORM 9000-MESSAGE.

Where:

MATRIX-TABLE-NAME			four character table name.

MATRIX-TABLE-NUM-DIMS			number of dimensions (up to 12)

MATRIX-TABLE-DIMENSIONS(n)		the number of coordinates in the associa
ted 								dimension.
MATRIX-TABLE-INDEX-NAME    		name of index VWA. Spaces for fixed len
gth 							cell table
MATRIX-TABLE-DATA-NAME			name of data VWA.
MATRIX-TABLE-CELL-SIZE			length of cells in table. Zero if variable
length cell 							table.
MATRIX-REQUEST-FLAG			execute synchronously (MATRIX-SYNC) or
asynchronously (MATRIX-ASYNCH)

Connect to a Table
An application must be connected to a table to be able to use it. Th
e connection process returns a four character table token which is r
equired on every other access to the table. The table token must be
saved in a variable in the applications program and presented to rea
d and write cells. The token must be held until access to the table
is no longer required at which point the token must be invalidated b
y the disconnect process. Table connect is performed by function MXT
ABLEC which is part of the MXTABLES API.


01 TABLE-TOKEN                PIC X(4).

          MOVE tblname		TO MATRIX-CONNECT-TABLE-NAME.
          CALL 'MXTABLEC' USING MATRIX-REQUEST-MSG.
          IF RETURN-CODE = 0
          THEN MOVE MATRIX-RETURN-TABLE-TOKEN TO TABLE-TOKEN
          ELSE

Where:

MATRIX-CONNECT-TABLE-NAME		four character table name that access is
required to.


Allocate a cell in a Table
In variable length cell tables the cells have a size of zero until t
hey are allocated. Each cell in a table that is to be used is alloca
ted with its own length which may be any size from 1 to 32786. The c
ell to be allocated is identified by its coordinates in a coordinate
 list. The coordinate list is specified separately from the request
message because the request message is updated during calls to Matri
x and running lists of coordinates would not be possible without a s
eparate list. The coordinate list must be prepared prior to the API
call and accompanies the message during the call.

01 TABLE-COORD.
    03 COORD-LIST              OCCURS 3 PIC 9(8) COMP.


          MOVE nx	      TO COORD-LIST(1).
          MOVE ny       TO COORD-LIST(2).
....
          MOVE nz       TO COORD-LIST(n).
          MOVE TABLE-TOKEN	TO MATRIX-ALLOC-TABLE-TOKEN.
          MOVE nCellSize   TO MATRIX-ALLOC-CELL-SIZE.
          CALL 'MXTABLEA'  USING MATRIX-REQUEST-MSG TABLE-COORD.
          IF RETURN-CODE = 0
          THEN
          ELSE

Where:

MATRIX-ALLOC-TABLE-TOKEN	The token returned by Connect Table.

MATRIX-ALLOC-CELL-SIZE		Size to make the cell.
COORD-LIST				Table of  numberic values. Each entry in the list is n
umbered
according to the dimension it represents. The numeric values in each
 entry is the coordinate in that dimension. Thus if the
					required cell is (1,4,7) then COORD-LIST(1) = 1,
					COORD-LIST(2) = 4 and COORD-LIST(3) = 7.


Read data from a Table
Data is read from cells by the MXTABLER API call. The function requi
res the coordinates of the cell to read in a coordinate list. A data
 area may be specified to read the cell into. This is passed to MXTA
BLER as the second parameter. This parameter may be omitted, in whic
h case the record will be returned in a buffer. The buffer address i
s returned in MATRIX-RETURN-READ-ADDR. This buffer should be freed a
s soon as it is no longer needed. The actual length read is returned
 in MATRIX-RETURN-LEN-READ.

01 WS-DATA-AREA                PIC X(200).
01 TABLE-COORD.
    03 COORD-LIST              OCCURS 3 PIC 9(9) COMP.

           MOVE nx	      TO COORD-LIST(1).
           MOVE ny       	TO COORD-LIST(2).
....
           MOVE nz       	TO COORD-LIST(n).
           MOVE TABLE-TOKEN	TO MATRIX-READ-TABLE-TOKEN.
           CALL 'MXTABLER'  USING MATRIX-REQUEST-MSG WS-DATA-AREA
                                  TABLE-COORD.
           IF RETURN-CODE = 0
           THEN DISPLAY WS-DATA-AREA
 		             MOVE MATRIX-RETURN-LEN-READ TO LEN-READ
 		             MOVE MATRIX-RETURN-READ-ADDR TO READ-ADDR
           ELSE
Where:

MATRIX-READ-TABLE-TOKEN		The token returned by Connect Table.



Write data to a Table
Data is written to cells by the MXTABLEW API call. The function requ
ires the coordinates of the target cell in a coordinate list. A data
 area containing the data to be written is required to be passed to
MXTABLER as the second parameter.


           MOVE nx	      TO COORD-LIST(1).
           MOVE ny       TO COORD-LIST(2).
....
           MOVE nz       TO COORD-LIST(n).
	          MOVE TABLE-TOKEN TO MATRIX-WRITE-TABLE-TOKEN.
           CALL 'MXTABLEW'  USING MATRIX-REQUEST-MSG WS-DATA-AREA
                                  TABLE-COORD.
           IF RETURN-CODE = 0
           THEN
           ELSE


Disconnect from a Table
When access to a table is no longer required the application must di
sconnect from it before exiting. Disconnect is handled by MXTABLED.


           MOVE TABLE-TOKEN TO MATRIX-DISCON-TABLE-TOKEN.
           CALL 'MXTABLED'  USING MATRIX-REQUEST-MSG.
           IF RETURN-CODE = 0
           THEN
           ELSE


Load a Table
Tables may be saved to data files and be reloaded when required. No
part of a table may be resident in any part of the sysplex when a ta
ble is loaded. If any VWA is present the load will fail and the tabl
e will not be created. The base table file must be accessible to the
 CPU that this command is running on. The Index and data portions of
 tables do not need to be. They may be accessible to other CPU's in
the sysplex, in which case that portion of the table will be loaded
 on that CPU. This is potentially a long running task and it may be
dispatched asynchronously.

           MOVE MATRIX-LOAD-TABLE TO MATRIX-REQUEST.
           MOVE tNam		   TO MATRIX-LOAD-TABLE-NAME .
           MOVE DSNPFX   TO MATRIX-LOAD-TABLE-DSNAME.
           CALL 'MXSTUB'  USING MATRIX-REQUEST-MSG.
           IF RETURN-CODE = 0
           THEN
           ELSE

Where:

MATRIX-LOAD-TABLE-NAME 		Name of table to load
MATRIX-LOAD-TABLE-DSNAME	Datasetname prefix to use when forming DSNa
mes for table 						components.

The dataset names for tables is:
		PREFIX.TNAME.BASE - Table descriptor
		PREFIX.TNAME.inam  -  Index file. inam is the VWA name given to th
e index
		PREFIX.TNAME.dnam  -  Data file. dnam is the VWA name given to the
 data



Save a Table
Tables may be saved to data files and be reloaded when required. If
components of tables exist on CPU's other that the one on which this
 command is running they will be saved on their resident system and
Matrix will look for those systems when reloading the tables. This i
s potentially a long running task and it may be dispatched asynchron
ously.


           MOVE MATRIX-SAVE-TABLE TO MATRIX-REQUEST.
           MOVE tNam	   TO MATRIX-SAVE-TABLE-NAME .
           MOVE DSNPFX  TO MATRIX-SAVE-TABLE-DSNAME.
           CALL 'MXSTUB'  USING MATRIX-REQUEST-MSG.
           IF RETURN-CODE = 0
           THEN
           ELSE

Where:

MATRIX-SAVE-TABLE-NAME 		Name of table to save
MATRIX-SAVE-TABLE-DSNAME		Datasetname prefix to use when forming DSN
ames 					for table 	components.

Delete a Table
When a table is finished with it should be deleted..


           MOVE MATRIX-DELETE-TABLE TO MATRIX-REQUEST.
           MOVE TABLE-TOKEN TO MATRIX-DELETE-TABLE-TOKN.
           MOVE MATRIX-FORCE TO MATRIX-DELETE-TABLE-FORC.
           CALL 'MXSTUB'  USING MATRIX-REQUEST-MSG.
           IF RETURN-CODE = 0
           THEN
           ELSE

Where:

MATRIX-DELETE-TABLE-TOKN		Token of table to delete
MATRIX-DELETE-TABLE-FORC		MATRIX-FORCE will delete the table even if
                          it is still in use by others.
					                     MATRIX-NOFORCE will not delete a
					                     table or components if they are in use.






1


