



  MATRIX

                 Function Reference Manual
                     S/390 Assembler


SUMMARY OF CONTENTS



    Return Codes:
    Synchronous or Asynchronous?
    Tokens
    Matrix Message
    Programming Example

    Function Reference
        Create
        Delete
        Connect
        Disconnect
        Load
        Save
        Read
        Write
        Associate
        Disassociate
        Obtain
        Lock
        Release
        Lock
        Copy
        Search
        Wait
        Post

        HotSwap



Requesting Matrix Functions

The Matrix functions are requested through CALLMXid macro
instructions.  The macro instructions form a message which is
passed to SRSTUB.  The macro instructions can be issued either
with without branch labels to determine the action to be taken
for return codes.

The macros that invoke Matrix functions are all fundementally
similar and are used according to the following general model:

label CALLMXid PREFIX=xx,PARM=@plst,SYNC=[YES/NO],
                     other parameters
                     RETOK=label,
                     REQFAIL=label,
                     NOTSUP=label,
                     NOTFND=label,
                     QUIESC=label,
                     SOS=label,
                     LOCKED=label,
                     NOTINIT=label,
                     DSPTCHD=label,
                     ERROR=label

Where:
label = Any appropriate program label
id = request specific function identifier
PREFIX = any two characters. Same as used on the SRUSPLST macro
PARM = address of a double word in dynamic storage
SYNC = [YES/NO] specifies if the task is to be synchronous or
asynchronous other parameters = Parameters specific to request

Optional labels are used to determine the next instruction to
have control when the function request is complete.  Either all
labels must be supplied or none.  If no labels are supplied then
the return code in R15 must be tested for values shown in the
Return Codes section..

RETOK = label to branch to if all went well
REQFAIL = label to branch to if request failed
NOTSUP = label to branch to if function not supported
NOTFND = label to branch to if Matrix not running
QUIESC = label to branch to if Matrix is shutting down
SOS = label to branch to if short on storage
LOCKED = label to branch to if Matrix too busy to service request
NOTINIT = label to branch to if Matrix initialization not complete
DSPTCHD = label to branch to if asynchronous task dispatched
ERROR = label to branch to if any other error occurred

There are minor variations in each macro where certain conditions
are required, for instance SYNC is always set to YES for macros
that return a value.  If a request runs asynchronously errors are
reported to the console.

Parameters to the macros may be given in a variety of forms,
depending on the programs usage of variables:

e.g
SPACE=0                         numeric constant
SPACE=(SPCNUM)        the fullword value in SPCNUM is used
SPACE=SPCNUM          the address of the variable SPCNUM is used
SPACE=(Rn)            the value in the specified register is used

Return codes:

0 Request was successful
4 Request Failed. There may be an explanation in the returned message
8 Matrix is shutting down and will not service this request
12 Matrix is not running
16 Storage Shortage
20 Error in request.  Ensure message has been properly
   initialized and has not been improperly altered
24 Matrix is temporarily busy. Retry request.
28 Matrix is not initialized. Retry request later.
32 Request invalid.
36 Request Dispatched


With a return code of 4, Matrix may also return a 40 character
detailed message in the message return area MXRCRETX.

Return code 24 indicates that a required resource is not yet
available to complete a request.  The request should be retried

Return code of 36 is not an error.  This alerts the application
to the status of an asynchronous task.  Return code 36 is only
returned if the request is dispatched asynchronously.

Synchronous or Asynchronous?
An important decision to make with each Matrix request, is
whether it will run in background while the requesting
application continues, or will the application pause until the
function is complete.  Some functions must return a value and so
may only run synchronously with the requesting program.  Whether
an eligible request runs synchronously or asynchronously is
entirely dependant on the applications requirements.  Control may
or may not return to the application before an asynchronous
function is complete.  Control usually returns to the application
quicker for asynchronous requests.  Sync or Async is selected by
setting the SYNC field in the macro to YES or NO.   An
asynchronous request always results in a return code of 36 if the
request was successfully dispatched.  If the request failed to
dispatch, one of the other return codes will apply.

Tokens
A TOKEN is a 20 character field which provides for extra
quick access to certain Matrix functions and is required for
others.  The TOKEN is returned by a Connect request.  Once a
token has been obtained by an application it must be preserved
unaltered.  Passing an invalid token to a Matrix function will
have unpredictable results.

Matrix Message
The macros used to invoke Matrix functions require a ôMessageö.
This is generated by the SRUSPLST macro.  It is required in the
dynamic storage of any program that invokes a Matrix function.
This message area contains the request before it goes out, and a
response when it comes back.  The message is generated with a two
character prefix, which is used to identify the message to be
used to a macro.


*
*DYNAMIC STORAGE DEFINITION
*
        SRUSPLST PREFIX=MX,DSECT=YES
@PLST.DS.D



*
* DUMMY SECTIONS
*
        MXREQCOD PREFIX=MXUS
        MXMSGREC DSECT=YES,PREFIX=MX


Programming Example
This example shows the setup and call required to copy data from
one virtual work area to another.  In this example, if Matrix is
busy (LOCKED), the request is retried.  If the request fails, the
detailed message is read from the message return area.  The
returned message is called C1RCRETX , because the PREFIX field of
SRUSPLST specifies C1.

In this example most of the labels (EXIT, ERROR etc) are not
coded for brevity.

*
* Copy Data from one work area to another.
*
COPYWA CALLMXCC PREFIX=C1,PARM=@PLST,SYNC=YES, ++
            FROMNAME=FWANAM,                   ++
            FROMADDR=FADDR,                    ++
            TONAME=TWANAM,                     ++
            TOADDR=TADDR,                      ++
            LENGTH=CLEN,                       ++
            RETOK=OK,                          ++
            REQFAIL=RET04,                     ++
            NOTSUP=ERROR,                      ++
            NOTFND=NOTRUN,                     ++
            QUIESC=SHUTDOWN,                   ++
            SOS=NOSTG,                         ++
            LOCKED=COPYWA,                     ++
            NOTINIT=COPYWA,                    ++
            DSPTCHD=BUG,                       ++
            ERROR=BUG
OK      DS 0H
       . . .
*
RET04   DS 0H
        MVC MSG,C1RCRETX    SAVE REASON MESSAGE
        B EXIT
*
* DYNAMIC STORAGE
*
        SRUSPLST PREFIX=C1,DSECT=NO
@PLST   DS D    Double Word Parameter List
FADDR   DS D    Copy From Address in Virtual Work Area
TADDR   DS D    Copy To Address in Virtual Work Area
CLEN    DS D    Length to copy
FWANAM  DS CL4  Copy From Wirtual Work Area name
TWANAM  DS CL4  Copy To Virtual Work Area name

*
* DUMMY SECTIONS
*
        MXREQCOD PREFIX=C1US
        MXMSGREC DSECT=YES,PREFIX=C1





Function Reference

Create Virtual Work Area
A Work Area may be up to one half terabyte in size.  This
function may run synchronously or asynchronously.  If it runs
synchronously it may return a message.  A virtual work area is
identified by a four character name.

Macro Name: CALLMXCW

label    CALLMXCW PREFIX=,PARM=, SYNC=,
                            SIZE=,
                            NAME=

Where:     NAME=name of work area to create
                SIZE=size of work area

Returns:
No value is returned.

Delete Virtual Work Area
Delete a Work Area.  When a work area has been deleted, the space
it occupied is made available for other uses.  Once deleted,
neither the space, nor the data in it are accessible.  This
function may run synchronously or asynchronously.  If it runs
synchronously it may return a message.  Work Areas may be force
deleted.  Forcing a Work Area will delete it even if users are
still attached to it.

Macro Name: CALLMXDW

label    CALLMXDW PREFIX=,PARM=, SYNC=,
                            NAME=,
                            FORCE=

Where:    NAME=name of work area to delete
               FORCE=[YES/NO]

Returns:
No value is returned.

Connect to a Work Area
This function connects a user program to a work area and returns
a token which is to be passed to Matrix with other function
requests.  This function runs synchronously, because it must
return a value (token) to the invoker.

Macro Name: CALLMXCN

label    CALLMXCN TYPE=CONNECT,PREFIX=,PARM=, SYNC=YES,
                            WANAME=,
                            TOKEN=

Where:    WANAME=name of work area to connect to
               TOKEN=address of variable to receive token

Returns:
A token is returned in token return field MXRCRCTK.  This value
is placed in the specified TOKEN field.

Disconnect from a Work Area
Disconnect from a work area when work with it is complete.
This function may be requested synchronously or asynchronously.
A valid Token, returned by the Connect request must be supplied.

Macro Name: CALLMXCN

label    CALLMXCN TYPE=DISCONN,PREFIX=,PARM=,SYNC=,
                            TOKEN=

Where:    TOKEN=address of token returned by connect

Returns:
No value is returned.

Load Data into Work Area
This loads a file into a specified virtual work area.  The file
must be cataloged and if Matrix is running in a SYSPLEX, it must
be accessible to the primary.   This function may be requested
synchronously or asynchronously.  If it runs synchronously it may
return a message.

Macro Name: CALLMXFI

label    CALLMXFI TYPE=LOAD,PREFIX=,PARM=, DSN=,SYNC=[YES/NO],
                           NAME= ,
                           DSN=

Where:    NAME=name of work area to load into
               DSN=data set name to load from

Returns:
No value is returned.

Save Work Area to file
This saves the contents of the specified virtual work area to a
dataset.  If the dataset exists it must be cataloged.  The recod
and block size of the existing file are used.  If the dataset
does not exist, the record size of the data in the work area is
used as the block size.  If there is no record size associated
with a work area a default block size of 4096 is used.   This
function may be requested synchronously or asynchronously.  If it
runs synchronously it may return a message.

Macro Name: CALLMXFI

label    CALLMXFI TYPE=SAVE,PREFIX=,PARM=, SYNC=[YES/NO],
                           NAME= ,
                           DSN=

Where:    NAME=name of work area to load into
               DSN=data set name to load from

Returns:
No value is returned.

Read Data from Work Area
This function causes data to be read from a Work Area directly
into a program area.  This function may run synchronously or
asynchronously.  If it runs synchronously it may return a
message.  Large reads can be left to run in the background, if
circumstances dictate.  An asynchronous read returns only the
requested data to the requested record area.

Macro Name: CALLMXRD

label    CALLMXRD PREFIX=,PARM=, SYNC=[YES/NO],
                           TOKEN= ,
                           DEST=,
                           READLEN=,
                           FROMADDR=

Where:    TOKEN=variable containing TOKEN returned by Connect
               DEST=address in program storage to receive the data
               READLEN=length to read,
               FROMADDR=Address in work area to read from

Returns:
Actual number of bytes read is returned in MXUSREAD if request is
Synchronous.

Write Data to Work Area
Write data from program working storage to a Virtual Work Area.
This function may run synchronously or asynchronously.  If it
runs synchronously it may return a message.

Macro Name: CALLMXWR

label    CALLMXWR PREFIX=,PARM=,SYNC=[YES/NO],
                           TOKEN= ,
                           DEST=,
                           WRTLEN=,
                           FROMADDR=

Where:    TOKEN=variable containing TOKEN returned by Connect
               DEST=address in work area to receive the data
               WRTLEN=length to write,
               FROMADDR=Address in program storage to write from

Returns:
Actual number of bytes written is returned in MXUSWRIT if request
is Synchronous.

Copy data between Work Areas.
This function copies a block of data from one work area to
another or from one place to another within a single work area.
This function may run synchronously or asynchronously.  If it
runs synchronously it may return a message.

Macro Name: CALLMXCC

label    CALLMXCC PREFIX=,PARM=,SYNC=[YES/NO],
                           FROMNAME= ,
                           FROMADDR=,
                           TONAME=,
                           TOADDR=,
                            LENGTH=

Where:    FROMNAME=name of source work area
               FROMADDR=Address of source data
               TONAME=Name of target work area
               TOADDR=Address of target data
               LENGTH=length of data to be copied

Returns:
No value is returned.

Search For Data in Work Area
There are two modes of operation for a search.  Searches can be
performed with or without a token.  If a token is not supplied,
then the work area name must be supplied.  If a token is
available, it should be used rather than the name.  This function
may only run synchronously because it returns a value.  The value
returned field MXRCHOFF in the return message is the address in
the work area of the start of the string that matches the search
data.

Macro Name: CALLMXSR

label    CALLMXSR PREFIX=,PARM=,SYNC=YES,
                           [TOKEN= ,/
                           WANAME=],
                           DATA=,
                           STARTAT=,
                           SCANLEN=,
                           ARGLEN=

Where:    TOKEN=Work Area Token returned by Connect
               WANAME=Name of Work Area to Search
               DATA=Address of data to be found
               STARTAT=Address in Work Area to start search at
               SCANLEN=length of Work Area to scan
               ARGLEN=Length of the search data

Returns:
The address of the location at which the data was found is
returned as a 64 bit address in MXRCHOFF.

With a Token
label    CALLMXSR PREFIX=,PARM=,SYNC=YES,
                           TOKEN= ,
                           DATA=,
                           STARTAT=,
                           SCANLEN=,
                           ARGLEN=

Without a Token
label    CALLMXSR PREFIX=,PARM=,SYNC=YES,
                           WANAME=,
                           DATA=,
                           STARTAT=,
                           SCANLEN=,
                           ARGLEN=


HotSwap two Work Areas
Hot Swapping enable two work areas to be exchanged, while
transactions are in flight.  Before a HotSwap, reads, writes and
searches are directed to a specific Virtual Work Area.  After a
Hot Swap, subsequent reads, writes, and searches are directed to
the other Virtual Work Area.  The Hot Swap can prohibit an
exchange if there are users attached to a Virtual Work Area.
This is selected by setting the EXINUSE=parameter to YES.  If
EXINUSE=NO the exchange will take place while transactions are in
flight.

Macro Name:CALLMXXC

label    CALLMXXC PREFIX=,PARM=,SYNC=[YES/NO],
                           SOURCE=,
                           TARGET=,
                           EXINUSE=

Where:    SOURCE=Name of the source Work Area
               TARGET=Name of Target Work Area
                EXINUSE=[YES/NO]

Returns:
No data returned.

Associate a Work Area
Associating a work area causes all updates to the work area to be
recorded in a backing dataset.  After the association has been
made between the work area and the backing dataset all updates
will be permanently recorded.   This request may run
synchronously or asynchronously.

Macro Name: CALLMXFI

label    CALLMXFI TYPE=ASSOC, PREFIX=,PARM=,SYNC=[YES/NO],
                           NAME=,
                           DSN=

Where:    NAME=Name of the Work Area
               DSN=data set name to back space on

Returns:
No data returned.

Disassociate a Work Area
Disassociation breaks the connection between a Virtual Work Area
and a backing dataset.  After this request completes, backing is
no longer performed for it.  This request may run synchronously
or asynchronously.

Macro Name: CALLMXFI

label    CALLMXFI TYPE=DISASSOC, PREFIX=,PARM=,SYNC=[YES/NO],
                           NAME=

Where:    NAME=Name of the Work Area

Returns:
No data returned.

Obtain a Lock on a Work Area
Locking a work area provides the application program with a
serialization key.  As long as the application holds that key, no
other application can get a new key.  The lock is held until the
lock is released with the "unlock" request.  Applications may use
this lock to serialize any process appropriate to its function.
The use of this lock has no affect on the performance or function
of Matrix.  The lock is provided to enable applications to
prevent multiple simultaneous access by different instances of
the locked code.  The lock is therefore a task lock and not a
control block lock This request must run synchronously because it
returns a key.   If this function returns a code of 24 (Busy), it
means that another application holds the lock.

Macro Name: CALLMXLK

label    CALLMXLK TYPE=LOCK, PREFIX=,PARM=,SYNC=YES,
                           TOKEN=,
                            KEY=

Where:    TOKEN=Token of the Work Area
               KEY=address of 32 bit area to receive the key

Returns:
The key to be used to release the lock is returned in R1 and the
specified KEY location

Release a Lock on a Work Area
Unlocking a work area frees the serialization lock so that
another application can request it.   This request may run
synchronously or asynchronously.

Macro Name: CALLMXLK

label    CALLMXLK TYPE=UNLOCK, PREFIX=,PARM=,SYNC=[YES/NO],
                           TOKEN=,
                           KEY=

Where:    TOKEN=Token of the Work Area
                KEY=address of 32 bit area to receive the key

Returns:
No value returned.

Wait for an Event to occur
Matrix enabled applications can signal the occurance of events to
each other.  If an application is dependant on an event, such as
the completion of a space load process, it can wait on a
predetermined event.  The program will pause until the event is
posted by another program.

Macro Name: CALLMXEV

label    CALLMXEV TYPE=WAIT, PREFIX=,PARM=,SYNC=YES,
                           EVENT=

Where:    EVENT=8 character event name


Returns:
Return code 0 if wait completed OK
Return code 4 and a message if it failed

Post an Event complete
When a program detects that a condition has occured that would
allow other waiting tasks to procede, it may post the event
complete.  If no tasks are waiting on an event when it is posted,
thge event is created in a posted state and subsequent tasks that
wait on the event will not wait.  If tasks are waiting for the
event they will be released and will continue to operate
independantly.

Macro Name: CALLMXEV

label    CALLMXEV TYPE=POST, PREFIX=,PARM=,SYNC=[YES/NO],
                           EVENT=

Where:    EVENT=8 character event name


Returns:
Return code 0 if post completed OK
Return code 4 and a message if it failed

File Handling operations
Open a file to virtual work area
Matrix allows certain file operations, such as GET, PUT, READ, WRITE to
go directly against a virtual work are. To achieve this the normal OPEN
OPEN and CLOSE macros are replaced by OPENMX and CLOSEMX.
The actual I/O macros are left unchanged.

OPENMX
OPENMX replaces the OPEN macro.

label OPENMX  PLIST=plist,
              DCB=dcbaddr,
              SYSNAME=nameaddr,
              VWA=vwanameaddr

If the virtual work area specified by VWA= does not exist, it is created
and loaded from the file specified by DCB=. If the virtual work area
does exist, it is addressed and data returned from it, bypassing the
file.


Example:

*
* OPEN THE DCB POINTED AT BY R3
* NORMALLY DONE WITH AN OPEN MACRO AS COMMENTED HERE
*
*        OPEN ((R3),INPUT),MF=(E,(R2)),MODE=31  OPEN FILE
*
* INSTEAD WE USE OPENMX
*
         OPENMX  PLIST=OPMXPLST,       OPEN FILE IN MATRIX            ++
               DCB=(R3),                                              ++
               SYSNAME=CL4'MTRX',      SERVER NAME                    ++
               VWA=CL4'TST1'           VIRTUAL WORK AREA NAME
*
         LTR   R15,R15                 DID IT WORK?
         BNZ   OPNFAIL                 NO ERROR

         TM    DCBOFLGS,DCBOFOPN       IS IT NOW OPEN?
         BNO   OPNFAIL                 NO ERROR



Close virtual work area file
CLOSEMX

label         CLOSEMX DCB=dcbaddr

This closes the file. The virtual work area is left intact with the data
in it until the virtual work area is explicitly deleted.

Example:

*
* CLOSE THE FILE. NORMALLY YOU USE A CLOSE MACRO
* WE JUST REPLACE IT WITH A CLOSEMX
*
*        CLOSE ((R3)),MF=(E,(R2)),MODE=31  CLOSE FILE
*
         CLOSEMX DCB=(R3)
*




€ 1997-2003 EXSPANS email: info@exspans.com
