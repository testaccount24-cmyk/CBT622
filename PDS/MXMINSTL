Matrix V2.2 Installation.

Download Matrix.zip to your PC. This contains the software installat
ion and sample file. Unzip this file on your PC. You will extract 12
 files.

These are:

api.maclib - Assembler language API
cobol.copylib - COBOL language API
matrix.cntl - JCL to compile and run examples
matrix.load - Matrix load library
matrix.object - API interface modules
matrix.parms - start up parameter files
matrix.proclib - JCL procedure library
sample.load - a load library for sample programs
sample.maclib - macros to assemble sample code
sample.object - an object library for sample code
sample.source - source code examples of the Matrix API
util.load - TSO and batch utility programs

To run Matrix you must transfer a minimum of matrix.load, util.load
and matrix.parms to the MVS-OS/390-z/OS host computer. All the other
 files are optional. The selected files must be uploaded to the MVS-
OS/390-z/OS system as binary files with a record length of 80 and bl
ock size of 3120. After transferring the binary files to the host yo
u must RECEIVE them through the TSO RECEIVE facility. The files all
have a file name prefix of DIST.MATRIX. If the file names are change
d on receive the JCL in other files will need to be altered.

Transfer and receive matrix.load. This is the Matrix execution libra
ry. This library MUST be APF authorized.

Transfer and receive util.load. This library contains a TSO program
and a batch utility program which demonstrate the Matrix API. It can
 be used to monitor and modify Matrix objects. This library must NOT
 be APF authorized.

Optionally, if you wish to write your own applications programs usin
g the Matrix API you may transfer any or all of the other files. If
you wish to use the batch utility program, you should transfer and r
eceive matrix.cntl, which contains JCL samples for running the batch
 utility program.

If you plan to write programs in COBOL, you need cobol.copylib which
 contains the COBOL programming interface and matrix.object which co
ntains high level language stubs. You should also transfer sample.so
urce which contains sample code as a guide.

If you plan to write programs in Assembler, you need api.maclib whic
h contains the Assembler language API. You should also transfer samp
le.source which contains sample code as a guide.

If you wish to assemble the sample programs you need sample.maclib.
The macros in this library are only to enable the samples code to as
semble. They do not represent good programming practice and should n
ot be used for any other purpose.





Running Matrix

Matrix is started as a started task. Put a started task procedure si
milar to the following into a system procedure library such as SYS1.
PROCLIB.


//MATRIX   PROC
//*
//* MATRIX V2.2 START UP
//*
//MATRIX EXEC PGM=MATRIX[,PARM=xxxx]

//STEPLIB   DD DSN=DEV.MATRIX.V2.LOAD,DISP=SHR
//SYSIN     DD DSN=DEV.MATRIX.V2.PARMS(START1),DISP=SHR
//MTRXIN    DD DSN=DEV.MATRIX.V2.PARMS(START2),DISP=SHR

There are two sets of parameters required to start Matrix. Create a
parameter library to contain members for the SYSIN and MTRXIN datase
ts. The parameter files are 80 byte card images. The parameters to u
se are in matrix.parms.


SYSIN parameters
*

* ******************************************************************
*
* START UP PARAMETERS FOR MATRIX
*
* ******************************************************************
*
*
* START SYSPLEX SUPPORT BY SPECIFYING A GROUP NAME
*
SYSPLEX=MXGROUP
*
* SPECIFY A TWO CHARACTER VERSION CODE. THIS SHOULD BE DIFFERENT FOR
* EACH COPY OF MATRIX RUNNING IN THE SAME PROCESSOR
*
VERSION=AA

The VERSION parameter is required. Any two non-numeric characters ma
y be specified.
The SYSPLEX parameter specifies the name of a SYSPLEX group which do
es not conflict with any other sysplex group name in use. If this pa
rameter is not specified, sysplex services may not be used. It shoul
d be used even in a MONOPLEX if multiple copies of  Matrix are to be
 used. Any name of up to 8 characters may be specified.


MTRXIN Parameters
*
* SPECIFY THE TYPE OF DATASPACE MATRIX IS TO USE
*
DATASPACE=COMMON

This parameter is optional and should only be changed on request from
support


Running Multiple copies of Matrix
Every processor in a sysplex that will participate in data and event
 sharing must have a copy of Matrix running. Each copy must have the
 same SYSPLEX name specified in the SYSPLEX parameter.

If only a MONOPLEX is available to test and verify Matrix functional
ity each copy of Matrix must have a different name specified on the
EXEC card parameter.

//MATRIX EXEC PGM=MATRIX

default name is MTRX

//MATRIX EXEC PGM=MATRIX,PARM=MTR2

name is MTR2

This name is used on an API CONNECT statement to connect to Matrix.

Start Matrix
Enter:  S Matrix
At the console

Stop Matrix
Enter: P Matrix
At the console

Query Matrix license serial number
Enter F Matrix,Serial
At the console

Each copy of Matrix has a license serial number. This number is need
ed when making inquiries for technical support and on a statement of
usage.

Start Matrix API TSO demonstration Program
At a TSO terminal enter
Call 'hlq.MATRIX.UTILITY.LOAD(MXDIALOG)'

This program presents a series of menus and panels that enable you t
o display and control Matrix objects.
This program invokes each of the Matrix APIÃ†s in response to termina
l input. Each panel demonstrates one API function that can be used i
n user programs. The TSO panels enable you to create and manage larg
e cross-system virtual work areas. You can also use the panels to lo
ad and manipulate data, directly and in tables. If Matrix is not run
ning MXDIALOG will not start.


Run Matrix API Batch demonstration Programs
The program used to demonstrate the API is a generic interpreter pro
gram called SSUTIL. This program interprets English sentences and tr
ansforms them into API calls which are executed to perform the funct
ion. This program is rather unforgiving and will halt execution afte
r any error. Note that an asterisk (*) in column 1 of the input deno
tes a comment.

The JCL for the demonstration jobs are in hlq.MATRIX.V2.CNTL.

RUNUTIL
This job contains an example of statements which can be executed aga
inst Matrix.

See the Batch Utility Guide for details of the meaning of the statem
ents.

RUNUTIL2
This contains a series of jobs which wait on cross systems events an
d post others. This series of jobs is used to demonstrate a cascade
of jobs that will wait then activate other jobs. If you run this ser
ies of jobs as they are, you should use the TSO events option to tri
gger the cascade.


Supported languages
The API is supported in Assembler, COBOL and C.
