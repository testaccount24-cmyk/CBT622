



MATRIX


                 Function Reference Manual
                          COBOL


SUMMARY OF CONTENTS


Requesting Matrix Functions

Return codes:
Synchronous or Asynchronous?
Tokens
Matrix Message

Programming Example

Function Reference List
    Create
    Delete
    Connect
    Disconnect
    Load Save
    Read Write
    Associate
    Disassociate
    Obtain
    Lock
    Release
    Lock Copy
    Search
    Wait Event
    Post Event

    HotSwap




Requesting Matrix Functions

Matrix functions are requested by calling the interface program,
MXSTUB, with a message. A message for each request must be
initialized before invoking the interface.  MXSTUB returns a
return code value after each invocation. The return code
indicates the success or failure of the call, and the reason for
the failure.

Return codes:

0 Request was successful
4 Request Failed. There may be an explanation in the returned message
8 Matrix is shutting down and will not service this request
12 Matrix is not running
16 Storage Shortage
20 Error in request.  Ensure message has been properly
   initialized and has not been improperly altered
24 Matrix is temporarily busy. Retry request.
28 Matrix is not initialized. Retry request later.
32 Request invalid.
36 Request Dispatched


Return code 4 Matrix may also return a 40 character detailed
message in the message return area MATRIX-RETURN-MESSAGE.

Return code 24 indicates that a required resource is not yet
available to complete a request.  The request should be retried

Return code 36 alerts the application to the status of an
asynchronous task.  This is only returned if the request is
dispatched asynchronously.

Synchronous or Asynchronous?
An important decision to make with each Matrix request, is
whether it will run in background while the requesting
application continues, or will the application pause until the
function is complete.  Some functions must return a value and so
may only run synchronously with the requesting program.  Whether
an eligible request runs synchronously or asynchronously is
entirely dependent on the applications requirements.  Control may
or may not return to the application before an asynchronous
function is complete.  Control usually returns more quickly to
the application for asynchronous requests.

Sync or Async is selected by setting MATRIX-REQUEST-SYNC in the
message to MATRIX-SYNC or MATRIX-ASYNC.

An asynchronous request always results in a return code of 36 if
the request was successfully dispatched.  If the request failed
to dispatch, one of the other return codes will apply.

Tokens
A TOKEN is an twenty character field which provides for enhanced
access to certain Matrix functions and is mandatory for other
functions.  The TOKEN is returned by a Connect request.  Once a
token has been obtained by an application, it must be preserved
unaltered.

Matrix Message
The message, which is passed to MXSTUB when requesting functions,
is defined in copy member MXPLIST.  This member must be copied
into the working storage of any COBOL program that invokes
Matrix.  Certain parts of the message must be specified for every
request others are optional depending on the function requested.
It is important to set the mandatory fields correctly.  If any
one of these fields is invalid results are unpredictable.

Mandatory message fields:

MATRIX-REQUEST Set to the desired request
MATRIX-REQUEST-SYNC Specify Synchronous or Asynchronous
MATRIX-REQUEST-PCR Set to LOW-VALUES

The fields that are specific to a request are listed with the
description of that request .

Programming Example
This example shows the setup and call required to create a
virtual work area of approximately 3.5 Gigabytes.  In this
example if the return code is not zero, a message analysis
routine is called.  The code examples are intended to show the
mechanics of the interface and do not necessarily represent good
programming practice.

  WORKING-STORAGE SECTION.
*
* COPY MATRIX INTERFACE PLIST
*
       COPY MXPLIST.
*
 PROCEDURE DIVISION.
 0000-MAINLINE.
* CREATE A VIRTUAL WORK AREA
     MOVE MATRIX-CREATE-WA TO MATRIX-REQUEST.
     MOVE 'DIV1' TO MATRIX-CREATEWA-NAME.
     MOVE 3500000000 TO MATRIX-CREATEWA-SIZE.
     MOVE MATRIX-SYNC TO MATRIX-REQUEST-SYNC.
     MOVE LOW-VALUES TO MATRIX-REQUEST-PCR.
     CALL 'MXSTUB' USING MATRIX-REQUEST-MSG.
     IF RETURN-CODE=0
     THEN DISPLAY 'REQUEST SUCCESSFUL'
     ELSE PERFORM 9000-MESSAGE.

 9000-MESSAGE.
     IF RETURN-CODE=4
          MOVE MATRIX-RETURN-MESSAGE TO WS-MESSAGE
        ELSE IF RETURN-CODE = 8
          MOVE 'MATRIX IS QUIESCING' TO WS-MESSAGE
        ELSE IF RETURN-CODE = 12
          MOVE 'MATRIX NOT FOUND' TO WS-MESSAGE
        ELSE IF RETURN-CODE = 16
          MOVE 'INSUFFICIENT STORAGE' TO WS-MESSAGE
        ELSE IF RETURN-CODE = 20
          MOVE 'REQUEST NOT SUPPORTED' TO WS-MESSAGE
        ELSE IF RETURN-CODE = 24
          MOVE 'MATRIX TEMP UNAVAIL' TO WS-MESSAGE
        ELSE IF RETURN-CODE = 28
          MOVE 'APPLICATION NOT INITIALIZED' TO WS-MESSAGE
        ELSE IF RETURN-CODE = 32
          MOVE 'ERROR IN REQUEST' TO WS-MESSAGE
        ELSE IF RETURN-CODE = 36
          MOVE 'REQUEST DISPATCHED' TO WS-MESSAGE.
     DISPLAY WS-MESSAGE.
 9000-EXIT.

Function Reference

Create Virtual Work Area
A Virtual Work Area is identified by a four character name and be
up to one half terabyte in size.  The amount of space requested
must be less than or equal to the residual amount left after all
previous allocations have been subtracted from this maximum.
This function may run synchronously or asynchronously.  If it
runs synchronously it may return a message.


Request name: MATRIX-CREATE-WA.
Request specific parameters:
MATRIX-CREATEWA-NAME The name of the Virtual Work Area
MATRIX-CREATEWA-SIZE Size of the Virtual Work Area to be created

Example:
MOVE MATRIX-CREATE-WA TO MATRIX-REQUEST.
MOVE name TO MATRIX-CREATEWA-NAME.
MOVE size TO MATRIX-CREATEWA-SIZE.
MOVE MATRIX-SYNC TO MATRIX-REQUEST-SYNC.
MOVE LOW-VALUES TO MATRIX-REQUEST-PCR.
CALL 'MXSTUB' USING MATRIX-REQUEST-MSG.
IF RETURN-CODE=0 . . .

Delete Virtual Work Area
When a work area has been deleted, the space it occupied is made
available for other uses.  Once deleted, neither the space, nor
the data in it are accessible.  This function may run
synchronously, or asynchronously.  If it runs synchronously, it
may return a message.


Request Name: MATRIX-DELETE-WA.
Request specific parameters:
MATRIX-DELETE WA-NAME: The name of the Virtual Work Area to be deleted.

Example:
MOVE MATRIX-DELETE-WA TO MATRIX-REQUEST.
MOVE 'DIV2' TO MATRIX-DELETEWA-NAME.
MOVE LOW-VALUES TO MATRIX-REQUEST-PCR.
MOVE MATRIX-SYNC TO MATRIX-REQUEST-SYNC.
CALL 'MXSTUB' USING MATRIX-REQUEST-MSG.
IF RETURN-CODE=0 . . .

Connect to a Work Ar ea
Connecting to a work area provides a fast path to the data in
that work area.  This function returns a token which is passed to
Matrix with other function requests.  This function always runs
synchronously, because it must return a value (token) to the
invoker.

Request Name: MATRIX-CONNECT-WA.
Request specific parameters:
MATRIX-CONNECT-WA-NAME: The name of the Virtual Work Area
to connect to.

Example:
MOVE MATRIX-CONNECT-WA TO MATRIX-REQUEST.
MOVE 'DIV2' TO MATRIX-CONNECT-WA-NAME.
MOVE LOW-VALUES TO MATRIX-REQUEST-PCR.
MOVE MATRIX-SYNC TO MATRIX-REQUEST-SYNC.
CALL 'MXSTUB' USING MATRIX-REQUEST-MSG.
IF RETURN-CODE=0
THEN MOVE MATRIX-RETURN-CONNECT-TOKEN TO TOKEN
ELSE . . .
Disconnect from a Work Area
Disconnect from a work area when work with it is complete.
This function may be requested synchronously or asynchronously.
A valid Token, returned by the "connect" request must be supplied.

Request Name: MATRIX-DISCONNECT-WA.
Request specific parameters:
MATRIX- DISCONNECT-TOKEN.  The token of the Virtual Work Area to
be disconnected from.

Example:
MOVE MATRIX-DISCONNECT-WA TO MATRIX-REQUEST.
MOVE TOKEN TO MATRIX-DISCONNECT-TOKEN.
MOVE LOW-VALUES TO MATRIX-REQUEST-PCR.
MOVE MATRIX-SYNC TO MATRIX-REQUEST-SYNC.
CALL 'MXSTUB' USING MATRIX-REQUEST-MSG OMITTED.
IF RETURN-CODE=0 . . .

Load Data into Work Area
This loads a file into a specified Virtual Work Area.  The file
must be cataloged and if Matrix is running in a SYSPLEX, it must
be accessible to the primary.  This function may be requested
synchronously or asynchronously.

Request Name:MATRIX-LOAD-WA.
Request specific parameters:
MATRIX-LOAD-WA-NAME Name of Virtual Work area to be load.
MATRIX-LOAD-WA-DSNAME. Name of dataset to load from.

Example:
MOVE MATRIX-LOAD-WA TO MATRIX-REQUEST.
MOVE waname TO MATRIX-LOAD-WA-NAME.
MOVE datasetname TO MATRIX-LOAD-WA-DSNAME.
MOVE LOW-VALUES TO MATRIX-REQUEST-PCR.
MOVE MATRIX-SYNC TO MATRIX-REQUEST-SYNC.
CALL 'MXSTUB' USING MATRIX-REQUEST-MSG.
IF RETURN-CODE=0 . . .

Save Work Area to file
This request saves the contents of a work area to a disk file.
If the file exists, it must be cataloged.  If the file exists,
its record and block size are used when writing it out.  If the
file does not exist, it will be created and cataloged with a
block size of 4096.  This function may be requested synchronously
or asynchronously.

Request Name: MATRIX-SAVE-WA.
Request specific parameters:
MATRIX-SAVE-WA-NAME Name of Virtual Work area to be saved.
MATRIX-SAVE-WA-DSNAME. Name of dataset to save to.

Example:
MOVE MATRIX-SAVE-WA TO MATRIX-REQUEST.
MOVE waname TO MATRIX-SAVE-WA-NAME.
MOVE datasetname TO MATRIX-SAVE-WA-DSNAME.
MOVE LOW-VALUES TO MATRIX-REQUEST-PCR.
MOVE MATRIX-SYNC TO MATRIX-REQUEST-SYNC.
CALL 'MXSTUB' USING MATRIX-REQUEST-MSG.
IF RETURN-CODE=0 . . .

Read Data from Work Area
This function causes data to be read from a Work Area directly
into a program area.  This function may run synchronously or
asynchronously.  If it runs synchronously it may return a
message.  Large reads can be left to run in the background, if
circumstances dictate.  An asynchronous read returns only the
requested data to the requested record area.

Request Name: MATRIX-READ-WA.
Request specific parameters:
MATRIX-READ-TOKEN Token of Virtual Work Area to read from.
MATRIX-READ-FROM-ADDRESS Address in Virtual Work Area of data
to be read.
MATRIX-READ-LENGTH. Length of data to be read

This function requires a token.

This function also requires a record area in working storage to
place the data at.  The record area is passed to Matrix as a
second parameter, after the request message.

Example:
MOVE MATRIX-READ-WA TO MATRIX-REQUEST.
MOVE token TO MATRIX-READ-TOKEN.
MOVE address TO MATRIX-READ-FROM-ADDRESS.
MOVE length TO MATRIX-READ-LENGTH.
MOVE LOW-VALUES TO MATRIX-REQUEST-PCR.
MOVE MATRIX-SYNC TO MATRIX-REQUEST-SYNC.
CALL 'MXSTUB' USING MATRIX-REQUEST-MSG WS-DATA-AREA.
IF RETURN-CODE=0 . . .

Write Data to Work Area
Write data from program working storage to a Virtual Work Area.
This function may run synchronously or asynchronously.  If it
runs synchronously it may return a message.  A data area
containing the record to be written must be passed with the
message.

Request Name: MATRIX-WRITE-WA.
Request specific parameters:
MATRIX-WRITE-TOKEN Token of Virtual Work Area to written to.
MATRIX-WRITE-TO-ADDRESS Address in Virtual Work Area to place the data.
MATRIX-WRITE-LENGTH. Length of data to be written.

This function requires a token.
This function also requires a record area in working storage to
place the data at.  The record area is passed to Matrix as a
second parameter, after the request message.

Example:
MOVE MATRIX-WRITE-WA TO MATRIX-REQUEST.
MOVE token TO MATRIX-WRITE-TOKEN.
MOVE toaddr TO MATRIX-WRITE-TO-ADDRESS.
MOVE len TO MATRIX-WRITE-LENGTH.
*
MOVE LOW-VALUES TO MATRIX-REQUEST-PCR.
MOVE MATRIX-SYNC TO MATRIX-REQUEST-SYNC.
CALL 'MXSTUB' USING MATRIX-REQUEST-MSG WS-DATA-AREA.
IF RETURN-CODE=0

Copy data between Work Areas
This function copies a block of data from one work area to
another.  This function may run synchronously or asynchronously.
If it runs synchronously it may return a message.

Request Name: MATRIX-COPY-WA.
Request specific parameters:
MATRIX-COPY-FROM-WANAME Source Work Area name.
MATRIX-COPY-FROM-ADDRESS Address of source data
MATRIX-COPY-TO-WANAME Destination Work Area name.
MATRIX-COPY-TO-ADDRESS Address of Destination.
MATRIX-COPY-LENGTH Length to copy.

Example:
MOVE MATRIX-COPY-WA TO MATRIX-REQUEST.
MOVE name1 TO MATRIX-COPY-FROM-WANAME.
MOVE name2 TO MATRIX-COPY-TO-WANAME.
MOVE length TO MATRIX-COPY-LENGTH.
MOVE frad TO MATRIX-COPY-FROM-ADDRESS
MOVE toad TO MATRIX-COPY-TO-ADDRESS
MOVE LOW-VALUES TO MATRIX-REQUEST-PCR.
MOVE MATRIX-SYNC TO MATRIX-REQUEST-SYNC.
CALL 'MXSTUB' USING MATRIX-REQUEST-MSG.
IF RETURN-CODE=0 . . .

Search For Data in Work Area
There are two modes of operation for a search.  Searches can be
performed with or without a token.  If a token is not supplied,
then the work area name must be supplied.  If a token is
available, it should be used rather than the name.  This function
may only run synchronously because it returns a value.  The value
returned in the return message is the address in the work area of
the start of the string that matches the search data.

Request Name: MATRIX-SEARCH-WA.
Request specific parameters:
MATRIX-SEARCH-TOKEN Optional Token to identify the work area.
MATRIX-SEARCH-WA-NAME Otional Name to identify the work area.
MATRIX-SEARCH-START-ADDRESS Address in work area to start seasrch at.
MATRIX-SEARCH-SCAN-LENGTH Length to scan for the data.
MATRIX-SEARCH-DATA-LENGTH Length of data to be found.
MATRIX-SEARCH-DATA Value of data to be found.

The address of the found data is returned in
MATRIX-RETURN-FOUND-ADDRESS.

With a Token
MOVE MATRIX-SEARCH-WA TO MATRIX-REQUEST.
MOVE token TO MATRIX-SEARCH-TOKEN.
MOVE LOW-VALUES TO MATRIX-SEARCH-WA-NAME.
MOVE start TO MATRIX-SEARCH-START-ADDRESS.
MOVE length TO MATRIX-SEARCH-SCAN-LENGTH.
MOVE dlen TO MATRIX-SEARCH-DATA-LENGTH.
MOVE data TO MATRIX-SEARCH-DATA.
*
MOVE LOW-VALUES TO MATRIX-REQUEST-PCR.
MOVE MATRIX-SYNC TO MATRIX-REQUEST-SYNC.
*
CALL 'MXSTUB' USING MATRIX-REQUEST-MSG.
IF RETURN-CODE=0
THEN MOVE MATRIX-RETURN-FOUND-ADDRESS TO WS-FOUND-ADDR

Without a Token
MOVE MATRIX-SEARCH-WA TO MATRIX-REQUEST.
MOVE name TO MATRIX-SEARCH-WA-NAME.
MOVE start TO MATRIX-SEARCH-START-ADDRESS.
MOVE length MATRIX-SEARCH-SCAN-LENGTH.
MOVE dlen TO MATRIX-SEARCH-DATA-LENGTH.
MOVE data TO MATRIX-SEARCH-DATA.
*
MOVE LOW-VALUES TO MATRIX-REQUEST-PCR.
MOVE MATRIX-SYNC TO MATRIX-REQUEST-SYNC.
*
CALL 'MXSTUB' USING MATRIX-REQUEST-MSG.
IF RETURN-CODE=0
THEN MOVE MATRIX-RETURN-FOUND-ADDRESS TO FOUND-ADDR

HotSwap two Work Areas
Hot Swapping enable two work areas to be exchanged, while
transactions are in flight.  Before a HotSwap, reads, writes and
searches are directed to a specific Virtual Work Area.  After a
Hot Swap, subsequent reads, writes, and searches are directed to
the other Virtual Work Area.  The HotSwap can prohibit an
exchange if there are users attached to a Virtual Work Area.
This is selected by setting the MATRIX-EXCHANGE-INUSE switch to
MATRIX-NOFORCE.  Setting this switch to MATRIX-FORCE will force
the exchange while transactions are in flight.

Request Name: MATRIX-EXCHANGE-WA.
Request specific parameters:
MATRIX-EXCHANGE-SOURCE-NAME Source Work Area name
MATRIX-EXCHANGE-TARGET-NAME Target Work Area name
MATRIX-EXCHANGE-INUSE Force the exchange even if work areas are in use

Example:
MOVE MATRIX-EXCHANGE-WA TO MATRIX-REQUEST.
MOVE fname TO MATRIX-EXCHANGE-SOURCE-NAME.
MOVE fname TO MATRIX-EXCHANGE-TARGET-NAME.
MOVE MATRIX-NOFORCE TO MATRIX-EXCHANGE-INUSE.
*
MOVE LOW-VALUES TO MATRIX-REQUEST-PCR.
MOVE MATRIX-SYNC TO MATRIX-REQUEST-SYNC.
*
CALL 'MXSTUB' USING MATRIX-REQUEST-MSG.
IF RETURN-CODE=0
THEN . . .

Associate a Work Area
Associating a work area causes all updates to the work area to be
recorded in a backing dataset.  After the association has been
made between the work area and the backing dataset all updates
will be permanently recorded.  This request may run synchronously
or asynchronously.

Request Name: MATRIX-ASSOCIATE-WA.
Request specific parameters:
MATRIX-SAVE-WA-NAME Name of Work Area to be associated.
MATRIX-SAVE-DSNAME Dataset name to be associated with the VWA

Example: MOVE MATRIX-ASSOCIATE-WA TO MATRIX-REQUEST.
MOVE 'DIV1' TO MATRIX-SAVE-WA-NAME.
MOVE WS-DSNAME1 TO MATRIX-SAVE-DSNAME.
*
MOVE LOW-VALUES TO MATRIX-REQUEST-PCR.
MOVE MATRIX-SYNC TO MATRIX-REQUEST-SYNC.
CALL 'MXSTUB' USING MATRIX-REQUEST-MSG WS-DATA-AREA.
IF RETURN-CODE=0
THEN DISPLAY 'REQUEST SUCCESSFUL'
ELSE PERFORM 9000-MESSAGE.
*

Disassociate a Work Area
Disassociation breaks the connection between a Virtual Work Area
and a backing dataset.  After this request completes, backing is
no longer performed for it.  This request may run synchronously
or asynchronously.

Request Name: MATRIX-DISASSOCIATE-WA.
Request specific parameters:
MATRIX-SAVE-WA-NAME Name of Work Area to be disassociated.

Example:
MOVE MATRIX-DISASSOCIATE-WA TO MATRIX-REQUEST.
MOVE 'DIV1' TO MATRIX-SAVE-WA-NAME.
*
MOVE LOW-VALUES TO MATRIX-REQUEST-PCR.
MOVE MATRIX-SYNC TO MATRIX-REQUEST-SYNC.
CALL 'MXSTUB' USING MATRIX-REQUEST-MSG WS-DATA-AREA.
IF RETURN-CODE=0
THEN DISPLAY 'REQUEST SUCCESSFUL'
ELSE PERFORM 9000-MESSAGE.
*

Obtain a Lock on a Work Area
Locking a work area provides the application program with a
serialization key.  As long as the application holds that key, no
other application can get a new key.  The lock is held until the
lock is released with the "unlock" request.  Applications may use
this lock to serialize any process appropriate to its function.
The use of this lock has no affect on the performance or function
of Matrix.  This request must run synchronously because it
returns a key.

If this function returns a code of 24 (Busy), it means that
another application holds the lock.

Request Name: MATRIX-LOCK-WA.
Request specific parameters:
MATRIX-LOCK-TOKEN Token of work area to lock.

Example:
MOVE MATRIX-LOCK-WA TO MATRIX-REQUEST.
MOVE TOKEN-2 TO MATRIX-LOCK-TOKEN.
*
MOVE LOW-VALUES TO MATRIX-REQUEST-PCR.
MOVE MATRIX-SYNC TO MATRIX-REQUEST-SYNC.
CALL 'MXSTUB' USING MATRIX-REQUEST-MSG WS-DATA-AREA.
IF RETURN-CODE=0
THEN MOVE MATRIX-RETURN-KEY TO WS-SAVE-KEY
DISPLAY 'REQUEST SUCCESSFUL'
ELSE IF RETURN-CODE=24
THEN GOTO RETRY-CALL
ELSE PERFORM 9000-MESSAGE.
*

Release a Lock on a Work Area
Unlocking a work area frees the serialization lock so that
another application can request it.  This request may run
synchronously or asynchronously.

Request Name: MATRIX-UNLOCK-WA.
Request specific parameters:
MATRIX-LOCK-TOKEN Token of work area to lock.
MATRIX-LOCK-KEY Key returned by Lock request.

Example:
MOVE MATRIX-UNLOCK-WA TO MATRIX-REQUEST.
MOVE TOKEN-2 TO MATRIX-LOCK-TOKEN.
MOVE WS-SAVE-KEY TO MATRIX-LOCK-KEY.
*
MOVE LOW-VALUES TO MATRIX-REQUEST-PCR.
MOVE MATRIX-SYNC TO MATRIX-REQUEST-SYNC.
CALL 'MXSTUB' USING MATRIX-REQUEST-MSG WS-DATA-AREA.
IF RETURN-CODE=0
THEN DISPLAY 'REQUEST SUCCESSFUL'
ELSE PERFORM 9000-MESSAGE.

Wait for Event to complete
Wait for another application or utility to signal the completion
of an event.  Execution of the application will be suspended
until notification is received of the completion of the event.
This request may only run synchronously because control is not
returned to the application until after the event occurs.

Request Name: MATRIX-WAIT-EVENT.
Request specific parameters:
MATRIX-EVENT-NAME Name of event to wait on.

Example:
MOVE MATRIX-WAIT-EVENT TO MATRIX-REQUEST.
MOVE 'evntname' TO MATRIX-EVENT-NAME.
*
MOVE LOW-VALUES TO MATRIX-REQUEST-PCR.
MOVE MATRIX-SYNC TO MATRIX-REQUEST-SYNC.
CALL 'MXSTUB' USING MATRIX-REQUEST-MSG WS-DATA-AREA.
IF RETURN-CODE=0
THEN DISPLAY 'REQUEST SUCCESSFUL'
ELSE PERFORM 9000-MESSAGE.
*

Post an Event complete
Signal the completion of an event.
This request may run synchronously or asynchronously.

Request Name: MATRIX-POST-EVENT.
Request specific parameters:
MATRIX-EVENT-NAME Name of event to be posted.

Example:
MOVE MATRIX-POST-EVENT TO MATRIX-REQUEST.
MOVE 'evntname' TO MATRIX-EVENT-NAME.
*
MOVE LOW-VALUES TO MATRIX-REQUEST-PCR.
MOVE MATRIX-SYNC TO MATRIX-REQUEST-SYNC.

CALL 'MXSTUB' USING MATRIX-REQUEST-MSG WS-DATA-AREA.
IF RETURN-CODE=0
THEN DISPLAY 'REQUEST SUCCESSFUL'
ELSE PERFORM 9000-MESSAGE.
*

Create a virtual table
Tables may contain fixed or varying length cells.  The procedure
is slightly different for each.  This request may run
synchronously or asynchronously.

Request Name: MATRIX-CREATE-TABLE.
Request specific parameters:
MATRIX-TABLE-NAME Name of new table.
MATRIX-TABLE-NUM-DIMS Number of dimensions in the table.
MATRIX-TABLE-DIMENSIONS(1) Scope of coordinates in this dimension
MATRIX-TABLE-DIMENSIONS(n) Insert the scope of each dimension.
MATRIX-TABLE-INDEX-NAME Name of VWA to contain index.
MATRIX-TABLE-DATA-NAME Name of VWA to contain the data.
MATRIX-TABLE-CELL-SIZE Size of cells in this table. Zero if
it is variable length.


Example 1: Create fixed length cell table

MOVE MATRIX-CREATE-TABLE TO MATRIX-REQUEST.
MOVE 'TBL1' TO MATRIX-TABLE-NAME.
MOVE 3 TO MATRIX-TABLE-NUM-DIMS.
MOVE 1000 TO MATRIX-TABLE-DIMENSIONS(1).
MOVE 200 TO MATRIX-TABLE-DIMENSIONS(2).
MOVE 176 TO MATRIX-TABLE-DIMENSIONS(3).
MOVE "DIV1" TO MATRIX-TABLE-DATA-NAME.
MOVE 100 TO MATRIX-TABLE-CELL-SIZE.
MOVE MATRIX-SYNC TO MATRIX-REQUEST-SYNC.
CALL 'MXSTUB' USING MATRIX-REQUEST-MSG.
IF RETURN-CODE=0
THEN DISPLAY 'REQUEST SUCCESSFUL'
ELSE PERFORM 9000-MESSAGE.

Example 2: Create variable length cell table

MOVE MATRIX-CREATE-TABLE TO MATRIX-REQUEST.
MOVE 'TBL2' TO MATRIX-TABLE-NAME.
MOVE 3 TO MATRIX-TABLE-NUM-DIMS.
MOVE 1000 TO MATRIX-TABLE-DIMENSIONS(1).
MOVE 200 TO MATRIX-TABLE-DIMENSIONS(2).
MOVE 176 TO MATRIX-TABLE-DIMENSIONS(3).
MOVE "DIV1" TO MATRIX-TABLE-INDEX-NAME.
MOVE "DIV2" TO MATRIX-TABLE-DATA-NAME.
MOVE ZERO TO MATRIX-TABLE-CELL-SIZE.
MOVE MATRIX-SYNC TO MATRIX-REQUEST-SYNC.
CALL 'MXSTUB' USING MATRIX-REQUEST-MSG.
IF RETURN-CODE=0
THEN DISPLAY 'REQUEST SUCCESSFUL'
ELSE PERFORM 9000-MESSAGE.

Connect to a virtual table
For high speed access tables return tokens on the connect process.
This request may run synchronously only.

Request Name: none.
Request specific parameters:
MATRIX-CONNECT-TABLE-NAME Name of table to connect to.

Connect to a table

MOVE 'TBL1' TO MATRIX-CONNECT-TABLE-NAME.
CALL 'MXTABLEC' USING MATRIX-REQUEST-MSG.
IF RETURN-CODE=0
THEN MOVE MATRIX-RETURN-TABLE-TOKEN TO TABLTOK-1
DISPLAY 'REQUEST SUCCESSFUL'
ELSE PERFORM 9000-MESSAGE.

Allocate a Cell in a virtual table
Variable length cell tables are created with cell length of zero.
Before an individual cell can be used it must be allocated.
Cells can be allocated in any order.

Request Name: none.
Request specific parameters:
MATRIX-ALLOC-TABLE-TOKEN Token of table to allocate in.

MATRIX-ALLOC-CELL-SIZE Size of this cell

Coordinates of cell

Example Allocate a cell at coordinate 1,4,7


MOVE TABLTOK-1 TO MATRIX-ALLOC-TABLE-TOKEN.
MOVE 200 TO MATRIX-ALLOC-CELL-SIZE.
MOVE 1 TO COORD-LIST(1).
MOVE 4 TO COORD-LIST(2).
MOVE 7 TO COORD-LIST(3).
CALL 'MXTABLEA' USING MATRIX-REQUEST-MSG TABLE-COORD.
IF RETURN-CODE=0
THEN DISPLAY 'REQUEST SUCCESSFUL'
     DISPLAY WS-DATA-AREA
ELSE PERFORM 9000-MESSAGE.

Example program.
There are two complete example programs in hlq.MATRIX.V2.SAMPLE.SOURCE

COBEXMP - illustrates the Matrix COBOL API
COBTBL  - illustrates Matrix Tables






€ 1997-2003 EXSPANS email: info@exspans.com

