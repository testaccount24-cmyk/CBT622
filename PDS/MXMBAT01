



MATRIX Utilities
Batch

          Applications Developers Manuals





Batch Utility Program

The Matrix batch utility program, MXPRS001, enables the
applications programmer or user to simply and effectively request
and perform complex systems functions. The utility may be used as
an administrative tool to prepare applications environments and
to control the Matrix environment. The program SSUTIL which is invoked
to run MXPRS001 is a generic language interpreter.

The batch utility program is run from hlq.MATRIX.UTILITY.LOAD

//JOBNAME JOB (accnt),'user',....
//        EXEC PGM=SSUTIL,PARM='MXPRS001'
//STEPLIB  DD DSN=hlq.MATRIX.UTILITY.LOAD,DISP=SHR
//SYSPRINT DD SYSOUT=*
//SYSIN    DD *
control statements
/*

Batch Utility Control Statements

The control statements are read as standard 80 byte parameter
records. An asterisk(*) in column 1 indicates a comment and the
entire contents of that record are ignored. The statements may
span multiple lines and any number of spaces may be placed
between words.

1) Associate
ASSOCIATE xxxx WITH DSNAME(backing.dataset.name)

This will cause the Virtual Work Area named xxxx to be associated
with a backing dataset. When a VWA is backed, all updates to it
are reflected in the backing dataset.

2) Copy
COPY xxxx ADDR=XXXXXXXX,LEN=DDDDDDD TO yyyy ADDR=XXXXXXXX

Copy the contents of VWA xxxx from location given by ADDR and a
length of LEN to the given address in VWA yyyy.  The addresses
and lengths may be specified by up to 18 decimal digits.

3) Create Virtual Work Area
CREATE VWA xxxx {MIRROR/NOMIRROR} SIZE sz t

This will create a persistent work area with the name given as
xxxx and a size specified by up to 18 decimal digits. The type of
numeric value specied is given by t. This may be B for Bytes, K
for KiloBytes, M for MegaBytes or G for GigaBytes. MIRROR specifies that
the work area will be mirrored on all systems. NOMIRROR specifies that
it will exist on the creating system only.


4) Delete Virtual Work Area
DELETE VWA xxxx

This will delete the named Virtual Work Area.

5) Delete Event
DELETE EVENT xxxxxxxx

This will delete the named event.

6) Disassociate
DISASSOCIATE xxxx

This will disassociate a work area from its backing dataset.

7) Display contents of a VWA
DISPLAY xxxx ADDR 00000000 LEN 00005000

This will print out the contents of the work area, starting at
the specified address for the given length, in hexadecimal and
character format.

8) List status of events
LIST EVENTS

This displays a list of all events and their status. Status may
be unused, waiting or posted.

9) Load VWA
LOAD xxxx FROM DSNAME(data.set.name)

Load data from the specified dataset into the named Virtual Work
Area

10) Obtain a lock on a VWA
LOCK xxxx

This obtains a serialization lock against a Virtual Work Area. A
lock may be used for any application defined purpose and is used
to serialize applications events, independently of Matrix task
dispatching.

11) Post an event complete
POST xxxxxxxx

This will notify Matrix and all dependant tasks that an
application defined event has occurred.

12) Reset an event
RESET xxxxxxxx

This resets a posted event to the unused condition to enable the
event label to be reused.

13) Save a VWA
SAVE xxxx TO DSNAME(data.set.name)

This writes the entire contents of a VWA to a sequential dataset

14) Swap VWA's
SWAP xxxx WITH yyyy

This exchanges Virtual Work Areas on the fly. If prior to the
SWAP operation data was read and written to xxxx, after the
operation yyyy will be the source and destination of reads and
writes.

15) Release a lock on a VWA
UNLOCK xxxx

This releases an application serialization event against a VWA.

16) Wait for an event to complete
WAIT xxxxxxxx

This will suspend processing of a task until the event is completed.

Example:
This simple example shows two jobs. They are required to run in
sequence. The first creates and loads a VWA, the second displays
selected contents from the VWA then deletes it. These jobs may be
submitted in any order provided that there are sufficient
initiators to ensure that they can execute simultaneously.

//JOB1 JOB .....
. . .
// SYSIN   DD *
* create a virtual work area, load it from a database file
* then notify tasks that require access to the data that it is ready
CREATE VWA VWA1 NOMIRROR SIZE 40 G
LOAD VWA1 FROM DSNAME(DATA.BASE.FILE)
POST AAAAAAA
/*



//JOB2 JOB .....
. . .
// SYSIN   DD *
* wait until the VWA1 has been formatted then display its
* contents. When work with the VWA
* is finished, delete it.

WAIT AAAAAAAA
DISPLAY VWA1 ADDR 00000000 LEN 00005000
DELETE WORKAREA VWA1
/*

17) Create a virtual table

Tables may be fixed or varying length cells. To create a fixed
length cell table:

CREATE TABLE tnam(n1,n2,n3....) DATA tdat CELLSIZE csz

Where tnam(n1,n2,n3...) is the name of the table to create and
the extent of each dimension. tdat is the name of the VWA which
will contain the table data and csz is the size of the fixed
length cells.

To create a varying length cell table:

CREATE TABLE tnam(n1,n2,n3....) INDEX tidx DATA tdat CELLSIZE 0

Where tnam(n1,n2,n3...) is the name of the table to create and
the extent tof each dimension. tidx is the name of a VWA which
will contain the table index and tdat is the name of a VWA which
will hold the data. CELLSIZE is always zero for a variable length
cell table.

18) Allocate a variable length cell in a virtual table

ALLOC CELL TABLE tnam(n1,n2,n3...) CELLSIZE csz

This allocates a cell in the named table at the coorinates given.
The length of the cell is csz. Cells do not have to be created in
order and cells that are not used do not need to be allocated.

19) Save a table

SAVE TABLE tnam TO (dsnprefix)

The components of a table are saved on the system that created
them. This command may be executed in any part of the sysplex.
The table to be saved is given as tnam and the datasets used to
save the table components are prefixed with dsnprefix.

20) Load a table

LOAD TABLE tnam FROM (dsnprefix)

The components of a table which were saved by the SAVE TABLE
command may be reloaded. The components of the table are reloaded
to the system that originally owned them.

21) Display a cell

DISPLAY TABLE tnam CELL(n1,n2,n3....)

The cell in tabal  tnam at the given coordinates are displayed in
hexadecimal and text format.

22) Delete a table

DELETE TABLE tnam

The named table and its components are deleted.

â‚¬ 1997-2003 EXSPANS email: info@exspans.com
