         CBL LIB
       IDENTIFICATION DIVISION.
       PROGRAM-ID. 'COBTBL'.
      *
      * THIS PROGRAM ILLUSTRATES EXAMPLES OF MATRIX API CALLS
      * THIS PROGRAM DOES NOT PERFORM ANY USEFUL APPLICATIONS
      * FUNCTION AND DOES NOT NECESARILY ILLUSTRATE GOOD PROGRAMMING
      * PRACTICE.
      *
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
      ***************** ALTERED **************************************
       SOURCE-COMPUTER. IBM-370.
       OBJECT-COMPUTER. IBM-370.
      ***************** ALTERED - END ********************************
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.

       DATA DIVISION.
       FILE SECTION.

       WORKING-STORAGE SECTION.

       01  WS-EYE-CATCHER.
           05  WS-PROGRAM-NAME             PIC X(08) VALUE 'MATRIX'.
           05  FILLER                      PIC X(24)
               VALUE ' WORKING-STORAGE'.
       01  WS-MESSAGE                      PIC X(64).
       01  WS-SAVE-KEY                     PIC 9(9) COMP.
      *
      * COPY MATRIX INTERFACE PLIST
      *
             COPY MXPLIST.
      *
      * ===========================
      *
       01 TABLTOK-1                   PIC X(4).
       01 TABLTOK-2                   PIC X(4).
       01 WS-DSNAME1                  PIC X(44).
       01 FOUND-ADDR                  PIC 9(9).
       01 WS-DATA-AREA                PIC X(200).
       01 TABLE-COORD.
           03 COORD-LIST              OCCURS 3 PIC 9(9) COMP.
      *
      * LINKAGE SECTION
      *
       LINKAGE SECTION.
      *
      *    PROCEDURE DIVISION
      *
       EJECT
       PROCEDURE DIVISION.

       0000-MAINLINE.
      *
      *    OBTAIN AN ACCESS TOKEN FOR MATRIX
      *
           DISPLAY 'ACCESS MATRIX'.
           MOVE MATRIX-ACCESS TO MATRIX-REQUEST.
           MOVE 'MTRX' TO MATRIX-ACCESS-NAME.
           CALL 'MXSTUB'  USING MATRIX-REQUEST-MSG.
           IF RETURN-CODE NOT= 0
           THEN PERFORM 9000-MESSAGE
                GOBACK.
      *
      *    CREATE A WORK AREA
      *
           DISPLAY 'CREATE DATA WORK AREA DIV1'.
           MOVE MATRIX-CREATE-WA TO MATRIX-REQUEST.
           MOVE 'DIV1' TO MATRIX-CREATEWA-NAME.
           MOVE 32000000   TO MATRIX-CREATEWA-SIZE.
           CALL 'MXSTUB'  USING MATRIX-REQUEST-MSG.
           IF RETURN-CODE = 0
           THEN DISPLAY 'REQUEST SUCCESSFUL'
           ELSE PERFORM 9000-MESSAGE.
      *
           DISPLAY 'CREATE INDEX WORK AREA DIV2'.
           MOVE MATRIX-CREATE-WA TO MATRIX-REQUEST.
           MOVE "DIV2" TO MATRIX-CREATEWA-NAME.
           MOVE 320000   TO MATRIX-CREATEWA-SIZE.
           CALL 'MXSTUB'  USING MATRIX-REQUEST-MSG.
           IF RETURN-CODE = 0
           THEN DISPLAY 'REQUEST SUCCESSFUL'
           ELSE PERFORM 9000-MESSAGE.
      *
           DISPLAY 'CREATE DATA WORK AREA DIV3'.
           MOVE MATRIX-CREATE-WA TO MATRIX-REQUEST.
           MOVE "DIV3" TO MATRIX-CREATEWA-NAME.
           MOVE 2000000   TO MATRIX-CREATEWA-SIZE.
           CALL 'MXSTUB'  USING MATRIX-REQUEST-MSG.
           IF RETURN-CODE = 0
           THEN DISPLAY 'REQUEST SUCCESSFUL'
           ELSE PERFORM 9000-MESSAGE.
      *
           DISPLAY 'CREATE A TABLE FROM DIV1 AND DIV2'
           MOVE MATRIX-CREATE-TABLE TO MATRIX-REQUEST.
           MOVE 'TBL1' TO  MATRIX-TABLE-NAME.
           MOVE 3 TO MATRIX-TABLE-NUM-DIMS.
           MOVE 100  TO MATRIX-TABLE-DIMENSIONS(1).
           MOVE 20  TO MATRIX-TABLE-DIMENSIONS(2).
           MOVE 176 TO MATRIX-TABLE-DIMENSIONS(3).
           MOVE "DIV2" TO MATRIX-TABLE-INDEX-NAME.
           MOVE "DIV1" TO MATRIX-TABLE-DATA-NAME.
           MOVE ZERO   TO MATRIX-TABLE-CELL-SIZE.
           MOVE MATRIX-SYNC TO MATRIX-REQUEST-FLAG.
           CALL 'MXSTUB'  USING MATRIX-REQUEST-MSG.
           IF RETURN-CODE = 0
           THEN DISPLAY 'REQUEST SUCCESSFUL'
           ELSE PERFORM 9000-MESSAGE.
*
           DISPLAY 'CREATE A FIXED LEN TABLE'
           MOVE MATRIX-CREATE-TABLE TO MATRIX-REQUEST.
           MOVE 'TBL2' TO  MATRIX-TABLE-NAME.
           MOVE 3 TO MATRIX-TABLE-NUM-DIMS.
           MOVE 100  TO MATRIX-TABLE-DIMENSIONS(1).
           MOVE 20  TO MATRIX-TABLE-DIMENSIONS(2).
           MOVE 176 TO MATRIX-TABLE-DIMENSIONS(3).
           MOVE SPACES TO MATRIX-TABLE-INDEX-NAME.
           MOVE "DIV3" TO MATRIX-TABLE-DATA-NAME.
           MOVE 133    TO MATRIX-TABLE-CELL-SIZE.
           MOVE MATRIX-SYNC TO MATRIX-REQUEST-FLAG.
           CALL 'MXSTUB'  USING MATRIX-REQUEST-MSG.
           IF RETURN-CODE = 0
           THEN DISPLAY 'REQUEST SUCCESSFUL'
           ELSE PERFORM 9000-MESSAGE.
      *
      * CONNECT TO A TABLE
      *
           DISPLAY 'CONNECT TO TABLE 1'.
           MOVE 'TBL1' TO MATRIX-CONNECT-TABLE-NAME.
           CALL 'MXTABLEC'  USING MATRIX-REQUEST-MSG.
           IF RETURN-CODE = 0
           THEN MOVE MATRIX-RETURN-TABLE-TOKEN TO TABLTOK-1
                DISPLAY 'REQUEST SUCCESSFUL'
           ELSE PERFORM 9000-MESSAGE.
      *
      *    ALLOCATE A CELL  (1,4,7)
      *
           DISPLAY 'ALLOCATE A CELL IN TABLE 1'
           MOVE TABLTOK-1 TO MATRIX-ALLOC-TABLE-TOKEN.
           MOVE 200       TO MATRIX-ALLOC-CELL-SIZE.
      *
           MOVE 1      TO COORD-LIST(1).
           MOVE 4      TO COORD-LIST(2).
           MOVE 7      TO COORD-LIST(3).
           CALL 'MXTABLEA'  USING MATRIX-REQUEST-MSG TABLE-COORD.
           IF RETURN-CODE = 0
           THEN DISPLAY 'REQUEST SUCCESSFUL'
           ELSE PERFORM 9000-MESSAGE.
      *
      *    READ DATA FROM TABLE
      *
           DISPLAY 'READ DATA FROM TABLE 1'
           MOVE TABLTOK-1 TO MATRIX-READ-TABLE-TOKEN.
           MOVE 1      TO COORD-LIST(1).
           MOVE 4      TO COORD-LIST(2).
           MOVE 7      TO COORD-LIST(3).
           CALL 'MXTABLER'  USING MATRIX-REQUEST-MSG WS-DATA-AREA
                                  TABLE-COORD.
           IF RETURN-CODE = 0
           THEN DISPLAY 'REQUEST SUCCESSFUL'
                DISPLAY WS-DATA-AREA
           ELSE PERFORM 9000-MESSAGE.
      *
      *    WRITE DATA TO TABLE
      *
           DISPLAY 'WRITE DATA TO TABLE 1'
           MOVE TABLTOK-1 TO MATRIX-WRITE-TABLE-TOKEN.
           MOVE 1      TO COORD-LIST(1).
           MOVE 4      TO COORD-LIST(2).
           MOVE 7      TO COORD-LIST(3).
           CALL 'MXTABLEW'  USING MATRIX-REQUEST-MSG WS-DATA-AREA
                                  TABLE-COORD.
           IF RETURN-CODE = 0
           THEN DISPLAY 'REQUEST SUCCESSFUL'
           ELSE PERFORM 9000-MESSAGE.
      *
      *    DISCONNECT FROM TABLE 1
      *
           DISPLAY 'DISCONNECT FROM TABLE 1'.
           MOVE TABLTOK-1 TO MATRIX-DISCON-TABLE-TOKEN.
           CALL 'MXTABLED'  USING MATRIX-REQUEST-MSG.
           IF RETURN-CODE = 0
           THEN DISPLAY 'REQUEST SUCCESSFUL'
           ELSE PERFORM 9000-MESSAGE.
      *
      * CONNECT TO A TABLE
      *
           DISPLAY 'CONNECT TO TABLE 2'.
           MOVE 'TBL2' TO MATRIX-CONNECT-TABLE-NAME.
           CALL 'MXTABLEC'  USING MATRIX-REQUEST-MSG.
           IF RETURN-CODE = 0
           THEN MOVE MATRIX-RETURN-TABLE-TOKEN TO TABLTOK-2
                DISPLAY 'REQUEST SUCCESSFUL'
           ELSE PERFORM 9000-MESSAGE.
      *
      *    READ DATA FROM TABLE
      *
           DISPLAY 'READ DATA FROM TABLE 2'
           MOVE TABLTOK-2 TO MATRIX-READ-TABLE-TOKEN.
           MOVE 1      TO COORD-LIST(1).
           MOVE 4      TO COORD-LIST(2).
           MOVE 7      TO COORD-LIST(3).
           CALL 'MXTABLER'  USING MATRIX-REQUEST-MSG WS-DATA-AREA
                                  TABLE-COORD.
           IF RETURN-CODE = 0
           THEN DISPLAY 'REQUEST SUCCESSFUL'
                DISPLAY WS-DATA-AREA
           ELSE PERFORM 9000-MESSAGE.
      *
      *    WRITE DATA TO TABLE
      *
           DISPLAY 'WRITE DATA TO TABLE 2'
           MOVE TABLTOK-2 TO MATRIX-WRITE-TABLE-TOKEN.
           MOVE 2      TO COORD-LIST(1).
           MOVE 3      TO COORD-LIST(2).
           MOVE 6      TO COORD-LIST(3).
           CALL 'MXTABLEW'  USING MATRIX-REQUEST-MSG WS-DATA-AREA
                                  TABLE-COORD.
           IF RETURN-CODE = 0
           THEN DISPLAY 'REQUEST SUCCESSFUL'
           ELSE PERFORM 9000-MESSAGE.
      *
      *    TRY ALLOCATE A CELL IN FIXED LEN TABLE
      *
           DISPLAY 'TRY TO ALLOCATE A CELL IN TABLE 2'
           MOVE TABLTOK-2 TO MATRIX-ALLOC-TABLE-TOKEN.
           MOVE 200       TO MATRIX-ALLOC-CELL-SIZE.
      *
           MOVE 2      TO COORD-LIST(1).
           MOVE 3      TO COORD-LIST(2).
           MOVE 2      TO COORD-LIST(3).
           CALL 'MXTABLEA'  USING MATRIX-REQUEST-MSG TABLE-COORD.
           IF RETURN-CODE = 0
           THEN DISPLAY 'REQUEST SUCCESSFUL'
           ELSE PERFORM 9000-MESSAGE.
      *
      *    DISCONNECT FROM TABLE 2
      *
      *    DISPLAY 'DISCONNECT FROM TABLE 2'.
      *    MOVE TABLTOK-2 TO MATRIX-DISCON-TABLE-TOKEN.
      *    CALL 'MXTABLED'  USING MATRIX-REQUEST-MSG.
      *    IF RETURN-CODE = 0
      *    THEN DISPLAY 'REQUEST SUCCESSFUL'
      *    ELSE PERFORM 9000-MESSAGE.
      *
      *    LOAD TABLE FROM FILES
      *
           DISPLAY 'LOAD TABLE TBX1 FROM P390'
           MOVE MATRIX-LOAD-TABLE TO MATRIX-REQUEST.
           MOVE 'TBX1'    TO MATRIX-LOAD-TABLE-NAME .
           MOVE 'P390'    TO MATRIX-LOAD-TABLE-DSNAME.
           CALL 'MXSTUB'  USING MATRIX-REQUEST-MSG.
           IF RETURN-CODE = 0
           THEN DISPLAY 'REQUEST SUCCESSFUL'
           ELSE PERFORM 9000-MESSAGE.
      *
      *    SAVE TABLE TO FILES
      *
           DISPLAY 'SAVE TABLE TBX1 TO SIMO'
           MOVE MATRIX-SAVE-TABLE TO MATRIX-REQUEST.
           MOVE 'TBX1'    TO MATRIX-SAVE-TABLE-NAME .
           MOVE 'SIMO'    TO MATRIX-SAVE-TABLE-DSNAME.
           CALL 'MXSTUB'  USING MATRIX-REQUEST-MSG.
           IF RETURN-CODE = 0
           THEN DISPLAY 'REQUEST SUCCESSFUL'
           ELSE PERFORM 9000-MESSAGE.
      *
      * DELETE TABLE 2 WITH FORCE BECAUSE STILL CONNECTED
      *
           DISPLAY 'DELETE TABLE 2 USING FORCE'.
           MOVE MATRIX-DELETE-TABLE TO MATRIX-REQUEST.
           MOVE 'TBL2' TO MATRIX-DELETE-TABLE-NAME.
           MOVE MATRIX-FORCE TO MATRIX-DELETE-TABLE-FORC.
           CALL 'MXSTUB'  USING MATRIX-REQUEST-MSG.
           IF RETURN-CODE = 0
           THEN DISPLAY 'REQUEST SUCCESSFUL'
           ELSE PERFORM 9000-MESSAGE.
      *
      *    DELETE TABLE TBL1 WITHOUT FORCE BECAUSE I DISCONNECTED
      *
           DISPLAY 'DELETE TABLE 1 WITH NO FORCE'.
           MOVE MATRIX-DELETE-TABLE TO MATRIX-REQUEST.
           MOVE 'TBL1' TO MATRIX-DELETE-TABLE-NAME.
           MOVE MATRIX-NO-FORCE TO MATRIX-DELETE-TABLE-FORC.
           CALL 'MXSTUB'  USING MATRIX-REQUEST-MSG.
           IF RETURN-CODE = 0
           THEN DISPLAY 'REQUEST SUCCESSFUL'
           ELSE PERFORM 9000-MESSAGE.
      *
      *
       1000-EXIT.
           GOBACK.
      *
      ******************************************************************
      * DISPLAY RETURN CODE VALUES                                     *
      ******************************************************************
      *
       9000-MESSAGE.
           IF RETURN-CODE = 4
                MOVE 'REQUEST FAILED' TO WS-MESSAGE
                DISPLAY WS-MESSAGE
                MOVE  MATRIX-RETURN-MESSAGE TO WS-MESSAGE
              ELSE IF RETURN-CODE = 8
                 MOVE 'MATRIX IS QUIESCING' TO WS-MESSAGE
              ELSE IF RETURN-CODE = 12
                 MOVE 'MATRIX NOT FOUND' TO WS-MESSAGE
              ELSE IF RETURN-CODE = 16
                 MOVE 'INSUFFICIENT STORAGE' TO WS-MESSAGE
              ELSE IF RETURN-CODE = 20
                 MOVE 'REQUEST NOT SUPPORTED' TO WS-MESSAGE
              ELSE IF RETURN-CODE = 24
                 MOVE 'APPLICATION IS LOCKED' TO WS-MESSAGE
              ELSE IF RETURN-CODE = 28
                 MOVE 'APPLICATION NOT INITIALIZED' TO WS-MESSAGE
              ELSE IF RETURN-CODE = 32
                 MOVE 'ERROR IN REQUEST' TO WS-MESSAGE
              ELSE IF RETURN-CODE = 36
                 MOVE 'REQUEST DISPATCHED' TO WS-MESSAGE.

           DISPLAY WS-MESSAGE.
       9000-EXIT.

